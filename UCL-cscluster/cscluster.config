executor {
  name = 'sge'
}

singularity.runOptions = "-B ${HOME}"

process {

    //NEED TO SET PARALLEL ENVIRONMENT TO SMP SO MULTIPLE CPUS CAN BE SUBMITTED
    penv = 'smp'

    //DUE TO HOW CS CLUSTER IS SET UP, THE ERROR STRATEGY MUST BE FAILING NOT RETRY
    errorStrategy = 'terminate'
    maxRetries = 0

    withLabel:process_single {
        cpus   = 1
        time   = 1.h

        def sge_mem_gb = ("6.GB" as nextflow.util.MemoryUnit)
        def sge_mem_mb = ("${sge_mem_gb}".toString().split(" ")[0].toInteger() * 1024)
        memory = "${sge_mem_gb}"

        clusterOptions = "-S /bin/bash -l tmem=${sge_mem_mb}M,h_vmem=${sge_mem_mb}M"
    }
    withLabel:process_low {
        cpus   = 2
        time   = 2.h

        def sge_mem_gb = ("6.GB" as nextflow.util.MemoryUnit) 
        def sge_mem_mb = ("${sge_mem_gb}".toString().split(" ")[0].toInteger() * 1024)
        memory = "${sge_mem_gb}"

        clusterOptions = "-S /bin/bash -l tmem=${sge_mem_mb}M,h_vmem=${sge_mem_mb}M"
    }
    withLabel:process_medium {
        cpus   = 4
        time   = 4.h

        def sge_mem_gb = ("10.GB" as nextflow.util.MemoryUnit)
        def sge_mem_mb = ("${sge_mem_gb}".toString().split(" ")[0].toInteger() * 1024)
        memory = "${sge_mem_gb}"

        clusterOptions = "-S /bin/bash -l tmem=${sge_mem_mb}M,h_vmem=${sge_mem_mb}M"
    }
    withLabel:process_high {
        cpus   = 8
        time   = 8.h

        def sge_mem_gb = ("16.GB" as nextflow.util.MemoryUnit)
        def sge_mem_mb = ("${sge_mem_gb}".toString().split(" ")[0].toInteger() * 1024)
        memory = "${sge_mem_gb}"

        clusterOptions = "-S /bin/bash -l tmem=${sge_mem_mb}M,h_vmem=${sge_mem_mb}M"
    }
    withLabel:process_long {
        cpus   = 1
        time   = 24.h

        def sge_mem_gb = ("2.GB" as nextflow.util.MemoryUnit)
        def sge_mem_mb = ("${sge_mem_gb}".toString().split(" ")[0].toInteger() * 1024)
        memory = "${sge_mem_gb}"

        clusterOptions = "-S /bin/bash -l tmem=${sge_mem_mb}M,h_vmem=${sge_mem_mb}M"
    }
    withLabel:process_high_memory {

        cpus   = 1
        time   = 1.h

        def sge_mem_gb = ("64.GB" as nextflow.util.MemoryUnit)
        def sge_mem_mb = ("${sge_mem_gb}".toString().split(" ")[0].toInteger() * 1024)
        memory = "${sge_mem_gb}"

        clusterOptions = "-S /bin/bash -l tmem=${sge_mem_mb}M,h_vmem=${sge_mem_mb}M"
    }
    withLabel:error_ignore {
        errorStrategy = 'ignore'
    }
}
